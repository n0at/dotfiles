#!/bin/bash

git_info() {
    ref=$(command git symbolic-ref HEAD 2>/dev/null)
    tag=$(command git describe --tags --exact-match 2>/dev/null)
    branch=$(command git show-ref --head -s --abbrev | head -n1 2>/dev/null)

    local GIT_LOCATION=""
    if [ ! -z "$ref" ]; then
        GIT_LOCATION=`echo $ref | sed 's|^refs/heads/||g'`
    elif [ ! -z "$tag" ]; then
        GIT_LOCATION="$tag"
    elif [ ! -z "$branch" ]; then
        GIT_LOCATION="$branch"
    fi

    if [ ! -z "$GIT_LOCATION" ]; then
        local AHEAD="#[fg=green,bg=#363a43]⇡ NUM "
        local BEHIND="#[fg=green,bg=#363a43]⇣ NUM "
        local MERGING="#[fg=magenta,bg=#363a43]⚡︎"
        local MODIFIED="#[fg=yellow,bg=#363a43]*"
        local STAGED="#[fg=yellow,bg=#363a43]+"
        local UNTRACKED="#[fg=yellow,bg=#363a43]~"

        local DIVERGENCES
        local FLAGS

        local NUM_AHEAD=$(git -C $1 log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')
        if [ "$NUM_AHEAD" -gt 0 ]; then
            DIVERGENCES=$(echo $DIVERGENCES$AHEAD | sed "s|NUM|$NUM_AHEAD|")
        fi

        local NUM_BEHIND="$(git -C $1 log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
        if [ "$NUM_BEHIND" -gt 0 ]; then
            DIVERGENCES=$(echo $DIVERGENCES$BEHIND | sed "s|NUM|$NUM_BEHIND|")
        fi

        local GIT_DIR="$(git -C $1 rev-parse --git-dir 2> /dev/null)"
        if [ ! -z "$GIT_DIR" ] && test -r $GIT_DIR/MERGE_HEAD; then
            FLAGS=$FLAGS$MERGING
        fi

        if [ ! -z "$(git -C $1 status --branch --porcelain 2>/dev/null | grep -E '^[ MARC]M')" ]; then
            FLAGS=$FLAGS$MODIFIED
        fi

        if [ ! -z "$(git -C $1 status --branch --porcelain 2>/dev/null | grep -E '^[MARC]')" ]; then
            FLAGS=$FLAGS$STAGED
        fi

        if [ ! -z "$(git -C $1 status --branch --porcelain 2>/dev/null | grep -E '^\?')" ]; then
            FLAGS=$FLAGS$UNTRACKED
        fi

        local GIT_INFO
        if [ -z "$DIVERGENCES" -a -z "$FLAGS" ]; then
            GIT_INFO="#[bg=#363a43,fg=colour255] "$GIT_LOCATION" #[fg=green,bg=#363a43]✔"
        elif [ -z "$DIVERGENCES" ]; then
            GIT_INFO="#[bg=#363a43,fg=colour255] $GIT_LOCATION #[bg=#363a43,fg=colour255]$FLAGS#[bg=#363a43,fg=colour255]"
        elif [ -z "$FLAGS" ]; then
            GIT_INFO="#[bg=#363a43,fg=colour255] $GIT_LOCATION #[bg=#363a43,fg=colour255]$DIVERGENCES#[bg=#363a43,fg=colour255]"
        else
            GIT_INFO="#[bg=#363a43,fg=colour255] $GIT_LOCATION #[bg=#363a43,fg=colour255]$FLAGS #[bg=#363a43,fg=colour255]$DIVERGENCES#[bg=#363a43,fg=colour255]"
        fi
        echo "#[fg=#262a33,bg=#363a43] $GIT_INFO #[bg=#262a33,fg=#363a43]"
    else
        echo "b"
    fi
}

directory="$1"
echo "#[fg=colour32,bg=#262a33]#[fg=colour255,bg=colour32] #P #[fg=colour32,bg=colour0]#[fg=#262a33,bg=#363a43]#[fg=colour255,bg=#363a43] #{pane_pid} #[bg=#262a33,fg=#363a43]#[fg=#262a33,bg=#363a43]#[fg=colour255,bg=#363a43] #(whoami) #[bg=#262a33,fg=#363a43]$(git_info $1)#[default] "
